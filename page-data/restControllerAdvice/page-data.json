{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/restControllerAdvice",
    "result": {"data":{"markdownRemark":{"id":"75b6b933-7e9a-54ad-893f-cdf2418fc056","html":"</br>\n<h2>@RestControllerAdvice</h2>\n<p><strong>전역적으로 예외처리하기</strong></p>\n</br>\n<p><code class=\"language-text\">@ExceptionHandler</code>, <code class=\"language-text\">@ModelAttribute</code>, <code class=\"language-text\">@InitBinder</code> 가 적용된 메서드들에 <code class=\"language-text\">AOP</code>를 적용해 <code class=\"language-text\">Controller</code> 단에 적용하기 위해 고안된 어노테이션이라고 한다.\n클래스에 선언하면 되며, 모든 <code class=\"language-text\">@Controller</code>에 대한, 전역적으로 발생할 수 있는 예외를 잡아서 처리할 수 있다.</p>\n</br>\n<p>💡 <strong>@RestControllerAdvice  = @ControllerAdvice + @ResponseBody</strong></p>\n<p><code class=\"language-text\">@RestControllerAdvice</code> 는<code class=\"language-text\">@ControllerAdvice</code>와 동일한 역할을 수행하고, 추가적으로 <code class=\"language-text\">@ResponseBody</code>를 통해 객체를 리턴할 수도 있다.</p>\n</br>\n</br>\n<p>Try Catch를 여기저기 사용해서 중복코드를 늘리지 않고도 전역적으로 예외를 처리하여보자.</p>\n</br>\n<div class=\"gatsby-code-title your-custom-class-name\">Controller</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestControllerAdviceSample</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception in Hello api!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bye\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Bye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception in Bye api!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<p>Exception에서 상속받고 있는 Throwable 클래스에 정의되어있는 getLocalizedMessage  를 사용해서 에러 메세지를  출력하고 ResponseEntity로 응답해보자.</p>\n</br>\n<div class=\"gatsby-code-title your-custom-class-name\">GlobalControllerAdvice.java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalControllerAdvice</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span> <span class=\"token function\">exception</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalizedMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>BAD_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<p>📋 @RestControllerAdvice 에서 자주쓰이는 속성들</p>\n<table>\n<thead>\n<tr>\n<th>상황</th>\n<th>code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>해당 패키지 Exception 처리<br />(basePackages)</td>\n<td>@RestControllerAdvice(basePackages = \"com.example\")</td>\n</tr>\n<tr>\n<td>해당 클래스 Exception 처리<br />(basePackageClasses)</td>\n<td>@RestControllerAdvice(basePackageClasses = MyController.class)</td>\n</tr>\n<tr>\n<td>anotation Exception처리<br />(annotations)</td>\n<td>@RestControllerAdvice(annotations = RestController.class)</td>\n</tr>\n</tbody>\n</table>\n</br>\n<p>이밖에도 @ExceptionHandler에 value를 통해 어떤 Exception을 처리할 것인지 지정할 수 있다. value가 여러개라면 value = { , , } 로 처리</p>\n<ul>\n<li>@ExceptionHandler(value = MethodArgumentNotValidException.class)</li>\n</ul>\n</br>\n</br>\n<h2>참고자료</h2>\n<ul>\n<li><a href=\"https://javachoi.tistory.com/253\">@RestControllerAdvice 를 이용해서 예외 처리하기</a></li>\n<li><a href=\"https://woodcock.tistory.com/19\">ResponseEntity는 왜 사용하는 것이며 @RestControllerAdvice는 무엇일까.</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.servlet.spring-mvc.error-handling\">Spring Boot Reference Documentation</a></li>\n<li><a href=\"https://velog.io/@banjjoknim/RestControllerAdvice\">@RestControllerAdvice를 사용해보자</a></li>\n</ul>","excerpt":"@RestControllerAdvice…","frontmatter":{"date":"January 19, 2022","slug":"/restControllerAdvice","title":"RestControllerAdvice 예외처리","description":"spring boot 에서 @RestControllerAdvice로 전역에서 예외를 처리하기","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d9fa2b706d593c58cb9fb5140477cd45/4a49b/restControllerAdvice.jpg","srcSet":"/static/d9fa2b706d593c58cb9fb5140477cd45/37bba/restControllerAdvice.jpg 750w,\n/static/d9fa2b706d593c58cb9fb5140477cd45/61c72/restControllerAdvice.jpg 1080w,\n/static/d9fa2b706d593c58cb9fb5140477cd45/4a49b/restControllerAdvice.jpg 1280w","sizes":"100vw"},"sources":[{"srcSet":"/static/d9fa2b706d593c58cb9fb5140477cd45/a66aa/restControllerAdvice.webp 750w,\n/static/d9fa2b706d593c58cb9fb5140477cd45/65dd5/restControllerAdvice.webp 1080w,\n/static/d9fa2b706d593c58cb9fb5140477cd45/71d4d/restControllerAdvice.webp 1280w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625}}}}}},"pageContext":{"id":"75b6b933-7e9a-54ad-893f-cdf2418fc056","previous":{"id":"2c6fbd31-105c-5cae-a5e9-6ef15d4b384f","frontmatter":{"slug":"/springbootvalidation","template":"blog-post","title":"Spring Boot Validation"}},"next":{"id":"9adb7a80-9dd3-547b-852a-c0b8886b062d","frontmatter":{"slug":"/constructor-injection","template":"blog-post","title":"생성자 주입, 필드 주입, 수정자 주입의 비교"}}}},
    "staticQueryHashes": ["228695001","2744905544","358227665"]}