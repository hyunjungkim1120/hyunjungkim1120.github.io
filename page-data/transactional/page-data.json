{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/transactional",
    "result": {"data":{"markdownRemark":{"id":"5ce188a9-3fdc-5989-823c-ed0e8a42db7a","html":"</br>\n<h2>트랜잭션의 특성 : ACID</h2>\n<ol>\n<li><strong>Atomic (원자성)</strong> - A가 B에게 만원을 입급했다면 A계좌에서 만원이 빠져나가고 B계좌로 만원이 들어오는 두가지 일은 모두 성공하거나 모두 실패해야한다. <strong>(all-or-nothing)</strong></li>\n<li><strong>Consistency (일관성)</strong> -  데이터는 미리 정의된 규칙에서만 수정이 가능한 특성을 의미합니다. 숫자컬럼에 문자열값을 저장이 안되도록 보장.</li>\n<li><strong>Isolation (고립성)</strong> - 트랜잭션 수행시 다른 트랜잭션의 작업이 끼어들지 못하도록 보장하는 것</li>\n<li><strong>Durability (지속성)</strong> - 한번 반영(커밋)된 트랜젝션의 내용은 영원히 적용되는 특성</li>\n</ol>\n<blockquote>\n<p>참고 : <a href=\"https://ko.wikipedia.org/wiki/ACID\">https://ko.wikipedia.org/wiki/ACID</a></p>\n</blockquote>\n<hr>\n<h5>ACID한 특성을 Spring 의 Transactional 이 어떻게 지원하는가</h5>\n<p>스프링에서는 간단하게 어노테이션 방식으로 @Transactional**을 **메소드, 클래스, 인터페이스 위에 추가하여 사용하는 방식이 일반적이다.</p>\n<p>AOP를 이용해 코드 외부에서 트랜잭션의 기능을 부여해주고 속성을 지정할 수 있게 해주는 이러한 방법을 <strong>선언적 트랜잭션</strong>이라 부르며, 적용된 범위에서는 트랜잭션 기능이 포함된 <strong>프록시 객체가 생성</strong>되어 자동으로 <strong>commit 혹은 rollback</strong>을 진행해준다.</p>\n </br>\n</br>\n<h2>📋 @Transactional 옵션</h2>\n<ol>\n<li>\n<h4>isolation (격리수준)</h4>\n<p>트랜잭션에서 일관성없는 데이터 허용 수준을 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation<span class=\"token operator\">=</span><span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> dto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// DEFAULT : DB의 lsolation Level을 따른다</span>\n\n<span class=\"token comment\">// READ_UNCOMMITED (level 0) : 커밋되지 않는 데이터에 대한 읽기를 허용</span>\n\n<span class=\"token comment\">// READ_COMMITED (level 1) : 커밋된 데이터에 대해 읽기 허용</span>\n\n<span class=\"token comment\">// REPEATEABLE_READ (level 2) : 동일 필드에 대해 다중 접근 시 모두 동일한 결과를 보장</span>\n\n<span class=\"token comment\">// SERIALIZABLE (level 3) : 가장 높은 격리, 성능 저하의 우려가 있음</span></code></pre></div>\n<p>이때 <strong>READ_UNCOMMITED (level 0)</strong> 의 경우 Dirty Read가 발생할 수 있다. </p>\n<p><strong>Dirty Read란?</strong></p>\n<p>한 트렌젝션이 수정중인 데이터를 다른 곳에서 읽어갔는데 실행중이던 트랜젝션이 정상 커밋되지 않고 롤백되었다면 읽어갔던 데이터는 잘못된 것이다.</p>\n</br>\n</li>\n<li>\n<h4>propagation (전파옵션)</h4>\n<p>트랜잭션 동작 도중 다른 트랜잭션을 호출할 때, 어떻게 할 것인지 지정하는 옵션이다. 이 속성을 통해 호출된 트랜젝션 에서는 호출한 쪽의 트랜잭션을 그대로 사용할 수도 있고, 새롭게 트랜잭션을 생성할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation<span class=\"token operator\">=</span><span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>REQUIRED<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> dto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// REQUIRED (Defualt) : 디폴트 속성, 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성</span>\n\n<span class=\"token comment\">// REQUIRES_NEW : 항생 새로운 트랜잭션을 생성. 이미 진행중인 트랜잭션이 있다면 잠깐 보류하고 해당 트랜잭션 작업을 먼저 진행</span>\n\n<span class=\"token comment\">// SUPPORT : 이미 진행 중인 트랜잭션이 있다면 참여하고 없다면 트랜잭션을 설정하지 않음</span>\n\n<span class=\"token comment\">// NOT_SUPPORT : 이미 진행중인 트랜잭션이 있다면 보류, 트랜잭션 없이 작업을 수행</span>\n\n<span class=\"token comment\">// MANDATORY : 이미 진행중인 트랜잭션이 있어야만, 작업을 수행한다. 없다면 Exception을 발생</span>\n<span class=\"token comment\">// -> 혼자서는 독립적으로 트랜잭션을 진행하면 안 되는 경우에 사용</span>\n\n<span class=\"token comment\">// NEVER : 트랜잭션을 사용하지 않도록 강제한다. 트랜잭션이 있다면 Exception을 발생</span>\n\n<span class=\"token comment\">// NESTED : 진행중인 트랜잭션이 있다면 중첩된 트랜잭션이 실행되며, 존재하지 않으면 REQUIRED와 동일하게 실행</span>\n<span class=\"token comment\">// -> 하지만 독립적인 트랜잭션을 만드는 REQUIRES_NEW와는 다르다.중첩된 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만 자신의 커밋과 롤백은 부모 트랝개션에게 영향을 주지 않는다.</span></code></pre></div>\n</br>\n</li>\n<li>\n<h4>noRollbackFor</h4>\n<p>특정 예외 발생 시 rollback하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>noRollbackFor<span class=\"token operator\">=</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> dto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</li>\n<li>\n<h4>rollbackFor</h4>\n<p>특정 예외 발생 시 rollback한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor<span class=\"token operator\">=</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> dto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</li>\n<li>\n<h4>timeout</h4>\n<p>지정한 시간 내에 메소드 수행이 완료되지 않으면 rollback 한다. (-1일 경우 timeout을 사용하지 않는다)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> dto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</li>\n<li>\n<h4>readOnly</h4>\n<p>트랜잭션을 읽기 전용으로 설정한다. <strong>true</strong> 시 <strong>insert, update, delete</strong> 실행 시 예외 발생</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readonly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> dto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</br>\n</br>\n<h2>참고자료</h2>\n<ul>\n<li><a href=\"https://velog.io/@kdhyo/JavaTransactional-Annotation-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-26her30h\">@Transactional Annotation 알고 쓰자</a></li>\n<li><a href=\"https://goddaehee.tistory.com/167\">Transactional 정리 및 예제</a></li>\n</ul>\n</br>","excerpt":"트랜잭션의 특성 : ACID Atomic (원자성) - A가 B에게 만원을 입급했다면 A계좌에서 만원이 빠져나가고 B계좌로 만원이 들어오는 두가지 일은 모두 성공하거나 모두 실패해야한다. (all-or-nothing) Consistency…","frontmatter":{"date":"March 28, 2022","slug":"/transactional","title":"Transactional어노테이션과 ACID","description":"아주아주 중요한 트랜잭션의 특성과 옵션 정리하고 넘어가기 (ACID)","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/e63d605e80cccd02cce0faa5c9a11a34/4a49b/transactional.jpg","srcSet":"/static/e63d605e80cccd02cce0faa5c9a11a34/37bba/transactional.jpg 750w,\n/static/e63d605e80cccd02cce0faa5c9a11a34/61c72/transactional.jpg 1080w,\n/static/e63d605e80cccd02cce0faa5c9a11a34/4a49b/transactional.jpg 1280w","sizes":"100vw"},"sources":[{"srcSet":"/static/e63d605e80cccd02cce0faa5c9a11a34/a66aa/transactional.webp 750w,\n/static/e63d605e80cccd02cce0faa5c9a11a34/65dd5/transactional.webp 1080w,\n/static/e63d605e80cccd02cce0faa5c9a11a34/71d4d/transactional.webp 1280w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625}}}}}},"pageContext":{"id":"5ce188a9-3fdc-5989-823c-ed0e8a42db7a","previous":{"id":"0578b566-ed2b-5398-be36-80c2073635bb","frontmatter":{"slug":"/webMvcTest","template":"blog-post","title":"Controller 테스트 @WebMvcTest"}},"next":{"id":"d7e42c1d-7c16-5ed8-b85c-454bc265931a","frontmatter":{"slug":"/","template":"index-page","title":"Moongkim 개발일지"}}}},
    "staticQueryHashes": ["228695001","2744905544","358227665"]}