{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/perm-comb",
    "result": {"data":{"markdownRemark":{"id":"5a70d036-f3a9-5945-82a5-7002895b7e9f","html":"<p><strong>목차</strong></p>\n<hr>\n<p>[TOC]</p>\n</br>\n</br>\n<p><strong>간단 예시</strong></p>\n<hr>\n<p><strong>순서를 정해서나열하는 순열</strong> example</p>\n<ul>\n<li>순열 - 5명의 학생중 반장, 부반장, 선도를 뽑는 경우 (단, 한 사람은 하나의 직책만 맡을 수 있다)</li>\n<li>중복순열 - 5명의 학생중 반장, 부반장, 선도를 뽑는 경우 (단, 한 사람이 여러개 직책을 맡을 수 있다. 혼자 반장, 부반장, 선도 가능)</li>\n</ul>\n<p><strong>순서를 고려하지않고 뽑는 조합</strong> example</p>\n<ul>\n<li>조합 - 5명의 학생중 햄버거 먹을 사람 3명 뽑는 경우 (단, 1인 1햄버거)</li>\n<li>중복조합 - 5명의 학생중 햄버거 먹을 사람 3명 뽑는 경우 (단, 혼자 햄버거 여러개 먹기 가능)</li>\n</ul>\n<h2>순열 _ (Permutation)</h2>\n<p>순열이란 서로 다른 n개 중 r개를 골라 순서를 고려해 나열한 경우의 수를 말한다.</p>\n<p><strong>nPr  = n!(n-r)!</strong> </p>\n</br>\n<p>예를들어 3명의 학생이 등교하는 순서대로 줄을 선다고 생각해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1,2,3]</code></pre></div>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1]\n]</code></pre></div>\n</br>\n<p>1번학생 -> 2번학생->3번학생</p>\n<p>1번학생 -> 3번학생->2번학생</p>\n<p>2번학생 -> 1번학생->3번학생</p>\n<p>3번학생 -> 1번학생->2번학생</p>\n<p>3번학생 -> 2번학생->1번학생</p>\n<p>​\t\t\t\t=총 6가지경우의 수가 생긴다.</p>\n</br>\n<p>이젠 3명의 학생중 두명까지만 줄을 선다고 생각해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1,2,3]</code></pre></div>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n]</code></pre></div>\n<p>​\t\t\t=총 6가지경우의 수가 생긴다.</p>\n</br>\n<p>이젠 Java 로 해당 알고리즘을 생각하면서 구현해보자. 이해가 어렵다면 중복순열부터 보고오면 이해가 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 순열 <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO Auto-generated method stub</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//뽑을 갯수</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">perm</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//(배열, 결과배열, 방문체크배열, 현재인덱스, 최종적으로뽑을갯수)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                output<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">perm</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>[1, 2, 3] 배열에서 순열로 3개를 뽑는 경우</p>\n<p>맨처음 main에서 perm을 호출하면 for문에서 1자리에 방문체크하고 1을 뽑는다. </p>\n<p>인덱스를 +1 하여 다시 perm 호출하면 0부터 진행하는 for문에서 1은 방문체크가 true로 이전에 되어있으므로 2를 방문체크하고 2를 뽑는다.</p>\n<p>인덱스를 +1 하여 다시 perm 호출하면 0부터 진행하는 for문에서 1과 2는 방문체크가 true로 이전에 되어있으므로 3를 방문체크하고 3를 뽑는다.</p>\n<p>인덱스를 +1 하여 다시 perm 호출하면 if(depth == r) 조건에 걸리므로 <code class=\"language-text\">[1, 2, 3]</code>을 출력하고 return</p>\n<p>perm이 끝나서 인덱스2(i=2)의 방문상태를 false로 변경</p>\n<p>for문이끝나서 현재 perm이끝나고 이번엔 인덱스 1(i=1)의 방문상태를 false로 변경</p>\n<p>현재 output은 [1, , ]상태이며 for문 i=2 시작</p>\n<p>3을 방문체크하고 뽑는다   </p>\n<p>인덱스를 +1 하여 다시 perm 호출하면 1 ,3 은 방문체크 true이므로 <code class=\"language-text\">[1, 3, 2]</code> 를 출력하고 return </p>\n<p>이런식으로 DFS를 돌면서 모든 인덱스를 방문하는 형식이다.</p>\n</br>\n</br>\n<h2>중복순열_ (rePermutation)</h2>\n<p>중복순열은 중복을 허락하여 순서대로 뽑는 경우의 수 이다.</p>\n</br>\n<p>예를들어 3명의 학생중 반장 부반장 선도를 뽑는 경우의 수를 생각해보다. 단 한사람이 반장도하고 선도도하고 부반장도할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1,2,3]</code></pre></div>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    [1, 1, 1],\n    [1, 1, 2],\n    [1, 1, 3],\n    [1, 2, 1],\n    [1, 2, 2],\n    [1, 2, 3],\n    [1, 3, 1],\n    [1, 3, 2],\n    [1, 3, 3],\n    [2, 1, 1],\n    [2, 1, 2],\n    [2, 1, 3],\n    [2, 2, 1],\n    [2, 2, 2],\n    [2, 2, 3],\n    [2, 3, 1],\n    [2, 3, 2],\n    [2, 3, 3],\n    [3, 1, 1],\n    [3, 1, 2],\n    [3, 1, 3],\n    [3, 2, 1],\n    [3, 2, 2],\n    [3, 2, 3],\n    [3, 3, 1],\n    [3, 3, 2],\n    [3, 3, 3]\n]</code></pre></div>\n<p>​\t\t\t\t=총 27지경우의 수가 생긴다. (n개중r개를 중복순열하면 n의 r 제곱)</p>\n</br>\n<p>이젠 Java 로 해당 알고리즘을 생각하면서 구현해보자. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 중복순열 <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO Auto-generated method stub</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//뽑을 갯수</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reperm</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//(배열, 결과배열, 현재인덱스, 최종적으로뽑을갯수)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reperm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            output<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">reperm</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>[1,1,1]을 뽑고 </p>\n<p>perm을 나오면 depth가 2인상태에서 for문 i=1을 돌면 [1,1,2]를 뽑고 </p>\n<p>다시 perm을 나오면 depth가 2인상태에서 for문 i=2을 돌면 [1,1,3]을뽑고 </p>\n<p>perm을 나오면 depth가 2인상태에서 다음 for문 조건에 불충족하여 </p>\n<p>또한번 perm을 끝내면 depth가 1인상태로 [1, 2, ] 뽑기부터 시작......계속 반복한다.</p>\n</br>\n<h2>조합_(Combination)</h2>\n<p>조합은 n개의 수 중 순서에 상관없이 중복하지않고 r개를 뽑는 것이다. </p>\n</br>\n<p>예를들어 4명의 학생중 3개밖에 없는 햄버거를 먹을수있는 3명을 뽑는 경우의 수 생각해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1,2,3,4]</code></pre></div>\n</br>\n<p>1,2,3과 1,3,2 은 같은 결과로 친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    [1, 2, 3],\n    [1, 2, 4],\n    [1, 3, 4],\n    [2, 3, 4]\n]</code></pre></div>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 조합 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO Auto-generated method stub</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//뽑을 갯수</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n    \n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n         \n        output<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//뽑는경우</span>\n        <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//안뽑는경우</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</br>\n<h2>중복조합_(reCombination)</h2>\n<p>중복조합은 n개의 수 중 순서에 상관없이 중복상관없이 r개를 뽑는 것이다. </p>\n<p><strong>nHr</strong></p>\n<p>예를들어 4명의 학생중 3개밖에 없는 햄버거를 먹을수있는 3명을 뽑는 경우의 수 생각해보자</p>\n<p>1명이 햄버거를 3개 다 먹어도된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1,2,3,4]</code></pre></div>\n</br>\n<p>1,2,3과 1,3,2 은 같은 결과로 친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    [1, 1, 1],\n    [1, 1, 2],\n    [1, 1, 3],\n    [1, 1, 4],\n    [1, 2, 2],\n    [1, 2, 3],\n    [1, 2, 4],\n    [1, 3, 3],\n    [1, 3, 4],\n    [1, 4, 4],\n    [2, 2, 2],\n    [2, 2, 3],\n    [2, 2, 4],\n    [2, 3, 3],\n    [2, 3, 4],\n    [2, 4, 4],\n    [3, 3, 3],\n    [3, 3, 4],\n    [3, 4, 4],\n    [4, 4, 4]    \n]</code></pre></div>\n</br>\n<p>조합과 코드 상 다른 점은 뽑는 경우에 target을 그대로 다음 comb로 넘겨준다 (또 뽑아야하기때문!)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 중복조합 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO Auto-generated method stub</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//뽑을 갯수</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n    \n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n         \n        output<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//뽑는경우</span>\n        <span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//안뽑는경우</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>","excerpt":"목차 TOC 간단 예시 순서를 정해서나열하는 순열 example 순열 - 5명의 학생중 반장, 부반장, 선도를 뽑는 경우 (단, 한 사람은 하나의 직책만 맡을 수 있다) 중복순열 -…","frontmatter":{"date":"August 11, 2021","slug":"/perm-comb","title":"순열과 조합 알고리즘 Java","description":"순열, 중복순열, 조합, 중복조합 알고리즘 정확히 이해하고 넘어가기","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/bf25d826aadb28990b85a1416258de59/47930/combperm.jpg","srcSet":"/static/bf25d826aadb28990b85a1416258de59/47930/combperm.jpg 400w","sizes":"100vw"},"sources":[{"srcSet":"/static/bf25d826aadb28990b85a1416258de59/416c3/combperm.webp 400w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}}},"pageContext":{"id":"5a70d036-f3a9-5945-82a5-7002895b7e9f","previous":null,"next":{"id":"c4020206-222c-5db5-ba8c-7a28052767ae","frontmatter":{"slug":"/jmeter","template":"blog-post","title":"Jmeter 성능테스트"}}}},
    "staticQueryHashes": ["228695001","2744905544","358227665"]}