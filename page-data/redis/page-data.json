{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/redis",
    "result": {"data":{"markdownRemark":{"id":"131d52c1-a6d2-5738-908d-1d5993937247","html":"<h2>Redis</h2>\n<p>레디스는 Remote Dictionary Server의 약자로서, \"키-값\" 구조의 비정형 데이터를 저장하고 관리하기 위한 오픈 소스 기반의 비관계형 데이터베이스 관리 시스템이다.</p>\n</br>\n<p>캐싱, 세션 관리, 채팅/메시징, 속도제한 등 여러 사례에서 사용하며 현재 가장 인기 있는 키-값 스토어이다. Java, Python, PHP, C, C++, C#, JavaScript, Node.js, Ruby, R, Go를 비롯한 다양한 개발언어를 지원하며 속도가 빠르고 사용이 간편하여 다양한 웹, 모바일 등 다양한 분야에서 사용하고있다.</p>\n</br>\n</br>\n</br>\n<h4>Redis 에 대하여...</h4>\n<ol>\n<li>Redis는 디스크가 아닌 I/O가 가장 빠른 메모리에 저장하기 때문에 빠르다.</li>\n<li>일반적으로 서버의 메모리에 세션을 관리한다면 서로다른 서버간의 세션 공유를 위해 추가작업이 필요한 단점을 Redis로 극복가능!</li>\n</ol>\n<p>but, 레디스는 메모리저장 방식이므로 Physical Memory 이상을 사용하게 되면 swap이 발생하여 계속해서 디스크를 읽는다고 한다. 이 경우 Redis의 성능이 크게 저하되어 Redis의 사용의미가 줄어든다! </p>\n<p>또한 Redis는 싱글 스레드로 동작하여 데이터의 일관성을 보장하지만 한번에 하나의 커맨드가 실행되는 동안에 다음 명령은 대기상태이다. </p>\n</br>\n<p><strong>결론</strong> : Redis 서버를 목적/기능에 따라 분리해서 사용하면 분리된 서버 수 만큼 처리속도를 향상시켜 메모리 관리를 사용할 수 있다!</p>\n</br>\n</br>\n<h4>Redis 다운받기</h4>\n<p>다운로드 URL :  <a href=\"https://redis.io/download\">https://redis.io/download</a> </p>\n<p>(Docker를 사용의 경우 <a href=\"https://hub.docker.com/_/redis/\">https://hub.docker.com/_/redis/</a> 에서 이미지 관련된 정보를 얻을 수 있다.)</p>\n</br>\n</br>\n</br>\n<h4>Spring Boot + Redis</h4>\n<ol>\n<li>\n<p><strong>Maven또는 Gradle에 의존성 추가</strong></p>\n<p><code class=\"language-text\">spring-boot-starter-data-redis</code> : spring에서 redis를 사용하기 위한 의존성\n<code class=\"language-text\">spring-session-data-redis</code> : spring의 session storage로써 기존의 메모리 대신 redis를 이용해 세션을 저장 하기 위한 의존성</p>\n</br>\n</li>\n<li>\n<p><strong>application.properties or application.yml 에 host, port 설정</strong></p>\n<p>아래는 application. yml 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring:\n redis:\n   host: 192.168.56.107\n   port: 6379</code></pre></div>\n</br>\n</li>\n<li>\n<p><strong>Config 설정</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.redis.host}\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.redis.port}\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisConnectionFactory</span> <span class=\"token function\">redisConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">RedisStandaloneConfiguration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisStandaloneConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setHostName</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LettuceConnectionFactory</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</li>\n<li>\n<p><strong>어노테이션 설정</strong></p>\n<p>main메서드가 위치하는 클래스의 위에 <code class=\"language-text\">@EnableRedisHttpSession</code>을 추가</p>\n<p>어노테이션 설정으로 아주 간단하게 Redis Session Cluster 환경을 구성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableRedisHttpSession</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisSessionExamApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//Todo..</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</br>\n<p>이제 세션에 저장되는지 Test해보면 설정 끝!</p>\n</br>\n</br>\n</br>\n<h4>동시 접속자 Control</h4>\n<p>나는 여러개의 서버를 사용할 경우 세션값을 하나의 Redis서버로 관리할 수 있도록 로그인/로그아웃 에서 Redis를 활용하려고한다. 동시 접속임계치를 DB에 설정하고 Redis에서 <code class=\"language-text\">실시간 사용자 정보</code> , <code class=\"language-text\">실시간 사용자 count</code> , <code class=\"language-text\">사용자 Token</code> 을 확인하여 <strong>중복로그인, 로그인대기여부(동시접속자제한)</strong> 을 고려할 수 있다.</p>\n</br>\n</br>\n<p>다음 게시물에선 좀더 자세하게 Redis를 다룰 예정이다!</p>\n</br>","excerpt":"Redis 레디스는 Remote Dictionary Server…","frontmatter":{"date":"September 09, 2021","slug":"/redis","title":"redis","description":"Redis 개념이해 및 사용 (spring boot)","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/4c045236c26e43853afe2283829af631/e9a2e/icon.png","srcSet":"/static/4c045236c26e43853afe2283829af631/d664d/icon.png 750w,\n/static/4c045236c26e43853afe2283829af631/d6045/icon.png 1080w,\n/static/4c045236c26e43853afe2283829af631/511f6/icon.png 1366w,\n/static/4c045236c26e43853afe2283829af631/e9a2e/icon.png 1457w","sizes":"100vw"},"sources":[{"srcSet":"/static/4c045236c26e43853afe2283829af631/1f1d0/icon.webp 750w,\n/static/4c045236c26e43853afe2283829af631/18acf/icon.webp 1080w,\n/static/4c045236c26e43853afe2283829af631/95348/icon.webp 1366w,\n/static/4c045236c26e43853afe2283829af631/78dea/icon.webp 1457w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.638984214138641}}}}}},"pageContext":{"id":"131d52c1-a6d2-5738-908d-1d5993937247","previous":{"id":"c4020206-222c-5db5-ba8c-7a28052767ae","frontmatter":{"slug":"/jmeter","template":"blog-post","title":"Jmeter 성능테스트"}},"next":{"id":"11a95554-f452-53c6-a857-d73ce3f3f5a6","frontmatter":{"slug":"/kafka","template":"blog-post","title":"Kafka"}}}},
    "staticQueryHashes": ["228695001","2744905544","358227665"]}