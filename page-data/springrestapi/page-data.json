{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/springrestapi",
    "result": {"data":{"markdownRemark":{"id":"4f3bd079-e5de-5f0e-b813-de4199997cd7","html":"</br>\n<h3>REST 구성</h3>\n<p>자원(resource): URI</p>\n<p>행위(verb): HTTP Method</p>\n<ul>\n<li>\n<p>해당 자원에 대한 CRUD Operation을 적용하여 아래와 같이 사용.</p>\n<ul>\n<li>Create: 데이터 생성 (POST)</li>\n<li>Read: 데이터 조회 (GET)</li>\n<li>Update: 데이터 수정 (PUT)</li>\n<li>Delete: 데이터 삭제 (DELETE)</li>\n</ul>\n</li>\n</ul>\n</br>\n</br>\n<h3>GET</h3>\n<ul>\n<li>데이터를 조회 할떄 사용</li>\n</ul>\n<p>name, itemNumber 변수가 있는 ItemDto를 GET해보자! </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>dto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ItemDto</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>dto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestDto</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//1.Map Param값 받기</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"query-param-map\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queryParam<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        queryParam<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" = \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//2.DTO로 값 받기</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"query-param-dto\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">queryParam03</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ItemDto</span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//3. 요소 하나씩 값 받기</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span><span class=\"token string\">\"query-param\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">queryParam02</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> itemNumber<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name : \"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\", itemNumber : \"</span><span class=\"token operator\">+</span> itemNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"name : \"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\", itemNumber : \"</span><span class=\"token operator\">+</span> itemNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<p>GET 응답 결과 확인하기</p>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; \"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 37.890625%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'151\\'%20viewBox=\\'0%200%20400%20151\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M365%208l-1%204v3h35V7h-17l-17%201M0%20110v6h401v-12H0v6\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"get200\"\n        title=\"get200\"\n        src=\"/static/85f4f89ca1a49af63f165849e52662c4/2bef9/get200.png\"\n        srcset=\"/static/85f4f89ca1a49af63f165849e52662c4/6f3f2/get200.png 256w,\n/static/85f4f89ca1a49af63f165849e52662c4/01e7c/get200.png 512w,\n/static/85f4f89ca1a49af63f165849e52662c4/2bef9/get200.png 1024w,\n/static/85f4f89ca1a49af63f165849e52662c4/891d5/get200.png 1520w\"\n        sizes=\"(max-width: 1024px) 100vw, 1024px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\">get200</figcaption>\n  </figure></p>\n</br>\n<p>3번 변수명으로 하나씩 받는 경우 API요청시 <strong>QUERY PARAMETERS</strong> 에 일치하지않는 변수가 추가적으로 있는 경우는 해당변수를 제외하고 필요한 값만 받아온다. 하지만 필요한 RequestParam 을  <strong>API QUERY PARAMETERS</strong> 에 담아주지않았다면  400에러를 리턴한다.</p>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; \"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 28.90625%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'116\\'%20viewBox=\\'0%200%20400%20116\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M363%205l-1%204v3h34V9c0-4%200-4-5-4h-28M0%20107v6h401v-13H0v7\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"get400\"\n        title=\"get400\"\n        src=\"/static/e1618073e90925c7e5b006049f59513f/2bef9/get400.png\"\n        srcset=\"/static/e1618073e90925c7e5b006049f59513f/6f3f2/get400.png 256w,\n/static/e1618073e90925c7e5b006049f59513f/01e7c/get400.png 512w,\n/static/e1618073e90925c7e5b006049f59513f/2bef9/get400.png 1024w,\n/static/e1618073e90925c7e5b006049f59513f/ddc6c/get400.png 1534w\"\n        sizes=\"(max-width: 1024px) 100vw, 1024px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\">get400</figcaption>\n  </figure></p>\n</br>\n</br>\n<h3>Post</h3>\n<ul>\n<li>데이터를 추가할떄 사용 <strong>(Insert)</strong></li>\n</ul>\n<p>컨트롤러에 아래코드를 추가해서 Post를 확인해보자</p>\n<p>api 에서 Json 데이터를 body에 담아보내는 경우 변수명 표기법을 맞추기위해 (Json 에서는 Snake표기법 Java는 camel표기법)</p>\n<p>Dto Class 위에 <code class=\"language-text\">@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)</code> 를 사용하거나,</p>\n<p>각 변수 위에 <code class=\"language-text\">@JsonProperty(\"phone_number\")</code> 어노테이션 사용!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* RequestDto\nprivate String name;\n@JsonProperty(\"phone_number\")\nprivate String phoneNumber;\n@JsonProperty(\"item_list\")\nprivate List&lt;ItemDto> itemList;\n*/</span>\n\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/post-map\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMap</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> requestData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    requestData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key : \"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value : \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/post\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestDto</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">RequestDto</span> requestData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> requestData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; \"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 28.125%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'112\\'%20viewBox=\\'0%200%20400%20112\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M361%208v4c0%202%201%203%2018%203h17V7h-17l-18%201\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"postRequest\"\n        title=\"postRequest\"\n        src=\"/static/41ae0adac889678a0381a856543ec099/2bef9/postRequest.png\"\n        srcset=\"/static/41ae0adac889678a0381a856543ec099/6f3f2/postRequest.png 256w,\n/static/41ae0adac889678a0381a856543ec099/01e7c/postRequest.png 512w,\n/static/41ae0adac889678a0381a856543ec099/2bef9/postRequest.png 1024w,\n/static/41ae0adac889678a0381a856543ec099/c5394/postRequest.png 1535w\"\n        sizes=\"(max-width: 1024px) 100vw, 1024px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\">postRequest</figcaption>\n  </figure></p>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; \"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 32.03125%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'127\\'%20viewBox=\\'0%200%20400%20127\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M2%2019v6h398V13H2v6\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"post200\"\n        title=\"post200\"\n        src=\"/static/2cbb63337893a24bb2a655698ca0856e/2bef9/post200.png\"\n        srcset=\"/static/2cbb63337893a24bb2a655698ca0856e/6f3f2/post200.png 256w,\n/static/2cbb63337893a24bb2a655698ca0856e/01e7c/post200.png 512w,\n/static/2cbb63337893a24bb2a655698ca0856e/2bef9/post200.png 1024w,\n/static/2cbb63337893a24bb2a655698ca0856e/71c1d/post200.png 1536w,\n/static/2cbb63337893a24bb2a655698ca0856e/cd7c1/post200.png 1547w\"\n        sizes=\"(max-width: 1024px) 100vw, 1024px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\">post200</figcaption>\n  </figure></p>\n</br>\n</br>\n<h3>Put</h3>\n<ul>\n<li>데이터를 수정할떄 사용<strong>(Update)</strong></li>\n</ul>\n<p>컨트롤러에 아래코드를 추가해서 Put를 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/put\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestDto</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">RequestDto</span> requestData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> requestData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/put/{userId}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestDto</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">RequestDto</span> requestData<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PathVariable userId : \"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> requestData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</br>\n<h3>DELETE</h3>\n<ul>\n<li>데이터를 삭제할때 사용<strong>(delete)</strong></li>\n</ul>\n<p>컨트롤러에 아래코드를 추가해서 delete를 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete/{userId}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId : \"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name : \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n</br>\n<h3>응답코드</h3>\n<ul>\n<li>100 번대 </li>\n</ul>\n<p>​      100 :데이터의 일부를 서버가 받은 상태(처리중인 상태)</p>\n<ul>\n<li>200 번대 상태코드 : 정상적인 처리 후 응답</li>\n</ul>\n<p>​      200  :  OK , 정상처리</p>\n<p>​      204  :  정상처리 되었으나, 서버에 보낼 데이터가 없음</p>\n<ul>\n<li>300 번대(다른 URL 처리)</li>\n</ul>\n<p>​      301: 요청한 URL이 새로 변경되었음.</p>\n<p>​      304: 기존의 데이터와 변경된것이 없음</p>\n<ul>\n<li>400번대 </li>\n</ul>\n<p>​      400: 요청에 문제가 있기때문에 서버에서 인식할 수 없음</p>\n<p>​      403: 서버에서 허락되지않음</p>\n<p>​      404: 요청 URL을 찾을 수 없음</p>\n<p>​      406: 전송 방식이 허락되지 않음(REST방식에서 자주 나타나는 상태코드)</p>\n<ul>\n<li>500번대</li>\n</ul>\n<p>​      500: 서버에서 처리시 문제가 발생(프로그램 내부적인 오류)</p>\n<p>​      502: 게이트웨이, 프록시 상태의 문제(과부하)</p>\n<p>​      503: 일시적인 서비스 중단 상태</p>\n<p>​      504: 지정된 처리시간이 지나서 처리되지 못하는 경우</p>","excerpt":"REST 구성 자원(resource): URI 행위(verb): HTTP Method 해당 자원에 대한 CRUD Operation을 적용하여 아래와 같이 사용. Create: 데이터 생성 (POST) Read: 데이터 조회 (GET) Update…","frontmatter":{"date":"January 12, 2022","slug":"/springrestapi","title":"Spring RestAPI 기초","description":"Spring RestAPI","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/991d2e0fdcd771586ff2a3b991b46462/4a49b/restapi.jpg","srcSet":"/static/991d2e0fdcd771586ff2a3b991b46462/37bba/restapi.jpg 750w,\n/static/991d2e0fdcd771586ff2a3b991b46462/61c72/restapi.jpg 1080w,\n/static/991d2e0fdcd771586ff2a3b991b46462/4a49b/restapi.jpg 1280w","sizes":"100vw"},"sources":[{"srcSet":"/static/991d2e0fdcd771586ff2a3b991b46462/a66aa/restapi.webp 750w,\n/static/991d2e0fdcd771586ff2a3b991b46462/65dd5/restapi.webp 1080w,\n/static/991d2e0fdcd771586ff2a3b991b46462/71d4d/restapi.webp 1280w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625}}}}}},"pageContext":{"id":"4f3bd079-e5de-5f0e-b813-de4199997cd7","previous":{"id":"6d1336bf-fc77-5908-9aab-e6aaa5eca3a3","frontmatter":{"slug":"/Programmers_12913","template":"algorithm-post","title":"땅따먹기(프로그래머스) Java"}},"next":{"id":"d840f352-5e20-57bd-9951-b95fdc901423","frontmatter":{"slug":"/mysqlengines","template":"blog-post","title":"MySQL 서버 기초"}}}},
    "staticQueryHashes": ["228695001","2744905544","358227665"]}