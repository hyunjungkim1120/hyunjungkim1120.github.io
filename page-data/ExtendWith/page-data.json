{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/ExtendWith",
    "result": {"data":{"markdownRemark":{"id":"f52c18f8-b623-51d4-afef-0d6866a7df6e","html":"</br>\n<h2>📋 Service 테스트 작성</h2>\n<p>@SpringBootTest는 application을 띄우기때문에 시간이 오래걸리고 무거워 단위테스트하는데는 알맞지 않다.  test안에서 어플리케이션의 모든 빈이 떠있기때문에 목객체를 만들지 않아도 service들을 @Autowired 로 사용가능 하지만 격리성이 떨어지고 DB에 데이터가 있어야지만 Test할 수 있으므로 아래와 같이 Mockito를 사용해서 Service 테스트를 작성해본다.</p>\n<blockquote>\n<p>JUnit 4에서 제공하던 @RunWith 를 사용했는데 JUnit5부터는 ExtendWith 사용!</p>\n<p>참고 : <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications\">https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DmarkerServiceTest</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Mock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DeveloperRepository</span> developerRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Mock</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RetireDeveloperRepository</span> retireDeveloperRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@InjectMocks</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DMakerService</span> dMakerService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//org.mockito import해서 given 사용</span>\n        <span class=\"token comment\">//findByMemberId에 아무 문자열이나 주면 이런 응답을 주겠다고 Mocking을 설정</span>\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>developerRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByMemberId</span><span class=\"token punctuation\">(</span><span class=\"token function\">anyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optinal</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Developer</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">developerLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeveloperLevel</span><span class=\"token punctuation\">.</span>SENIOR<span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">experienceYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatusCode</span><span class=\"token punctuation\">.</span>EMPLOYED<span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">DeveloperDetailDto</span> developerDetail <span class=\"token operator\">=</span> dMarkerService<span class=\"token punctuation\">.</span><span class=\"token function\">getDeveloperDetail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>SENIOR<span class=\"token punctuation\">,</span> developerDetail<span class=\"token punctuation\">.</span><span class=\"token function\">getDeveloperLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> developerDetail<span class=\"token punctuation\">.</span><span class=\"token function\">getExperienceYears</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">createDeveloperTest_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//given</span>\n        <span class=\"token class-name\">CreateDeveloper<span class=\"token punctuation\">.</span>Request</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">CreateDeveloper<span class=\"token punctuation\">.</span>Request</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">developerLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeveloperLevel</span><span class=\"token punctuation\">.</span>SENIOR<span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">experienceYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">memberId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>developerRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByMemberId</span><span class=\"token punctuation\">(</span><span class=\"token function\">anyString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optinal</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ArgumentCaptor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Developer</span><span class=\"token punctuation\">></span></span> captor <span class=\"token operator\">=</span> \n            <span class=\"token class-name\">ArgumentCaptor</span><span class=\"token punctuation\">.</span><span class=\"token function\">forClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Developer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//when</span>\n        <span class=\"token class-name\">CreateDeveloper<span class=\"token punctuation\">.</span>Response</span> <span class=\"token operator\">=</span> dMarkerService<span class=\"token punctuation\">.</span><span class=\"token function\">createDeveloper</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//then</span>\n        <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>developerRepository<span class=\"token punctuation\">,</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>captor<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Developer</span> savedDeveloper <span class=\"token operator\">=</span> captor<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>SENIOR<span class=\"token punctuation\">,</span> savedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">getDeveloperLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> savedDeveloper<span class=\"token punctuation\">.</span><span class=\"token function\">getExperienceYears</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>💡 위의 코드와 같이 ArgumentCaptor 로 create하는 Data를 확인할 수 있다. </p>\n</br>\n<p><strong>@Mock</strong> : mock 객체를 만들어 반환(실제 인스턴스 없이 가상의 mock 인스턴스를 직접 만들어 사용)</p>\n<p><strong>@Spy</strong> : spy 객체를 만들어 반환(실제 인스턴스를 사용해서 mocking 함, Spy 객체는 행위를 지정하지 않으면 객체를 만들 때 사용한 실제 인스턴스의 메서드를 호출한다.) -> ARepository의 메소드 중 a함수는 return값을 만들어주고 b함수는 실제 기능을 그대로 사용하고 싶은 경우</p>\n<p><strong>@InjectMocks</strong> : @Mock이나 @Spy 객체를 자신의 멤버 클래스와 일치하면 주입</p>\n<p><strong>@MockBean</strong> : ApplicationContext에 mock객체를 추가<em>(org.springframework.boot.test.mock.mockito.MockBean)</em></p>\n<p><strong>@SpyBean</strong> : ApplicationContext에 spy객체를 추가</p>\n</br>\n<h5>@MockBean은 스프링 컨텍스트에 mock객체를 등록하게 되고 스프링 컨텍스트에 의해 @Autowired가 동작할 때 등록된 mock객체를 사용할 수 있도록 동작!</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MockBean</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">DeveloperRepository</span> developerRepository<span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@MockBean</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">RetireDeveloperRepository</span> retireDeveloperRepository<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">DMakerService</span> dMakerService<span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"📋 Service 테스트 작성 @SpringBootTest는 application을 띄우기때문에 시간이 오래걸리고 무거워 단위테스트하는데는 알맞지 않다.  test안에서 어플리케이션의 모든 빈이 떠있기때문에 목객체를 만들지 않아도 service…","frontmatter":{"date":"March 27, 2022","slug":"/ExtendWith","title":"Service 테스트 @ExtendWith","description":"Service 테스트 @ExtendWith","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f57c58c11f484742cc1d8ce6e09248f9/4a49b/extendWith.jpg","srcSet":"/static/f57c58c11f484742cc1d8ce6e09248f9/37bba/extendWith.jpg 750w,\n/static/f57c58c11f484742cc1d8ce6e09248f9/61c72/extendWith.jpg 1080w,\n/static/f57c58c11f484742cc1d8ce6e09248f9/4a49b/extendWith.jpg 1280w","sizes":"100vw"},"sources":[{"srcSet":"/static/f57c58c11f484742cc1d8ce6e09248f9/a66aa/extendWith.webp 750w,\n/static/f57c58c11f484742cc1d8ce6e09248f9/65dd5/extendWith.webp 1080w,\n/static/f57c58c11f484742cc1d8ce6e09248f9/71d4d/extendWith.webp 1280w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625}}}}}},"pageContext":{"id":"f52c18f8-b623-51d4-afef-0d6866a7df6e","previous":{"id":"2f0c2f2c-8393-5203-b3f8-5e21dfad033e","frontmatter":{"slug":"/lessons/92342","template":"algorithm-post","title":"양궁대회(프로그래머스) Java"}},"next":{"id":"0578b566-ed2b-5398-be36-80c2073635bb","frontmatter":{"slug":"/webMvcTest","template":"blog-post","title":"Controller 테스트 @WebMvcTest"}}}},
    "staticQueryHashes": ["228695001","2744905544","358227665"]}